单例设计模式：让多个实例的内存地址，都变成同一个地址
好处：1、节省内存的空间；2、只要对某一个对象修改，那么其余的对象也会跟着修改

==判断值是否一样，不管内存地址
is判断，值和内存地址都要一样，才会成立。一般用于判断None、True、False

object 基类中包含特殊函数，可以ctrl+左键查阅
new是静态方法，会默认有好多参数
new是专门负责存储内存地址的。几乎是整个类中，最快被调用的方法
原本new方法是输出内存地址，若重写就找不到指定内存地址从而输出None，可以定义一个类属性用于接收内存地址

重构new方法实现单例模式只返回一个地址

单例模式的使用场景：
当创建出来的对象，要对某一个对象修改属性名时，其余的对象也要变化的情况；
节约内存空间，让加载速度更快

异常处理不影响程序的运行
应用场景：当一些数据再不可控的状态下，或者你觉得可能会报错的
万能的异常捕获，Exception代表所有的报错，as result可用可不用。不会影响程序的运行
try：	异常的代码块
except Exception as result:	错误描述信息
else:	代码正常的情况下执行
finally:	一定会执行

创建对象时先调用__new__，再调用__init__
先有地址才有其他数据